/*----------------------------------------------------------------------------------------ARCHIVO MODELO    : EntidadObjetivo          : Clase entidad que identifica a la tabla de la base de datosAutor             : CMP-SISTEMAS (FRR)Fecha Creación    : 09/06/2018----------------------------------------------------------------------------------------*/#region Espacios de Nombresusing System;using System.ComponentModel.DataAnnotations;using System.Runtime.Serialization;#endregionnamespace Cmp02.Entities{    [DataContract]    [Serializable]    public partial class Tb_Colegiado_Especialidad    {        #region Atributos Básicos        [DataMember]  		public int Id_Especialidad { get; set; }  		[DataMember]  		public int Id_Persona { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar el número de la especialidad")]        [StringLength(20, ErrorMessage = "El Número de la Especialidad no debe pasar los 20 caracteres")]		public string Nro_Especialidad { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar un tipo de especialidad")]        [Range(1, 1000, ErrorMessage = "Debe Seleccionar un tipo de especialidad")]		public int Id_Tipo { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar la especialidad")]        [StringLength(200, ErrorMessage = "La Especialidad no debe pasar los 200 caracteres")]		public string Especialidad { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar un origen")]        [Range(1, 1000, ErrorMessage = "Debe Seleccionar un origen")]		public int Id_Origen_Especialidad { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar la universidad")]        [StringLength(150, ErrorMessage = "El nombre de la universidad no debe pasar los 150 caracteres")]		public string Universidad_Especialidad { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar una situación de la especialidad")]        [Range(1, 1000, ErrorMessage = "Debe Seleccionar la situación de la especialidad")]		public int Id_Situacion_Especialidad { get; set; }        [DataMember]        [Required(ErrorMessage = "Debe ingresar fecha de registro")]        [DataType(DataType.Date)]        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]        //[Range(typeof(DateTime), DateTime.Now.AddYears(-100).ToString("dd/MM/yyyy"), DateTime.Now.ToString("dd/MM/yyyy"), ErrorMessage = "Fecha fuera de rango")]		public DateTime Fecha_Registro { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar fecha de caducidad")]        [DataType(DataType.Date)]        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]        //[Range(typeof(DateTime), "01/01/1920", DateTime.Now.ToShortDateString(), ErrorMessage = "Fecha fuera de rango")]		public DateTime Fecha_Caducidad { get; set; }  		[DataMember]        //[Required(ErrorMessage = "Debe ingresar la Resolución")]        [StringLength(100, ErrorMessage = "El nombre de la Resolución no debe pasar los 100 caracteres")]		public string Resolucion { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar fecha de resolución")]        [DataType(DataType.Date)]        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]        //[Range(typeof(DateTime), "01/01/1920", DateTime.Now.ToShortDateString(), ErrorMessage = "Fecha fuera de rango")]		public DateTime Fecha_Resolucion { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar un consejo regional")]        [Range(1, 1000, ErrorMessage = "Debe Seleccionar un consejo regional")]		public int Id_Cons_Reg_Tramite { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar si es recertificado")]        [StringLength(1, ErrorMessage = "El Número de la Especialidad no debe pasar 1 caracter")]		public string Flg_Recertificado { get; set; }  		[DataMember]        [Required(ErrorMessage = "Debe ingresar fecha de especialidad")]        [DataType(DataType.Date)]        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]        //[Range(typeof(DateTime), "01/01/1920", DateTime.Now.ToShortDateString(), ErrorMessage = "Fecha fuera de rango")]		public DateTime Fecha_Especialidad { get; set; }  		[DataMember]        [StringLength(100, ErrorMessage = "El Número de la Entidad Acredada no debe pasar los 100 caracteres")]		public string Entidad_Acreditada_Esp { get; set; }                  #endregion    }}