!function (a) { var b = '{preview}\n<div class="input-group {class}">\n {caption}\n <div class="input-group-btn">\n {remove}\n {upload}\n {browse}\n </div>\n</div>', c = "{preview}\n{remove}\n{upload}\n{browse}\n", d = '<div class="file-preview {class}">\n <div class="file-preview-status text-center text-success"></div>\n <div class="close fileinput-remove text-right">&times;</div>\n <div class="file-preview-thumbnails"></div>\n <div class="clearfix"></div></div>', e = '<div class="form-control file-caption {class}">\n <span class="glyphicon glyphicon-file"></span> <span class="file-caption-name"></span>\n</div>', f = '<div id="{id}" class="modal fade">\n <div class="modal-dialog modal-lg">\n <div class="modal-content">\n <div class="modal-header">\n <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>\n <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n </div>\n <div class="modal-body">\n <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n </div>\n </div>\n </div>\n</div>\n', g = function (b, c) { return null === b || void 0 === b || b == [] || "" === b || c && "" === a.trim(b) }, h = function (a, b, c) { return g(a) || g(a[b]) ? c : a[b] }, i = function (a, b) { return "undefined" != typeof a ? a.match("image.*") : b.match(/\.(gif|png|jpe?g)$/i) }, j = function (a, b) { return "undefined" != typeof a ? a.match("text.*") : b.match(/\.(txt|md|csv|htm|html|php|ini)$/i) }, k = function () { return Math.round((new Date).getTime() + 100 * Math.random()) }, l = function (d, e) { this.$element = a(d), this.showCaption = e.showCaption, this.showPreview = e.showPreview, this.showRemove = e.showRemove, this.showUpload = e.showUpload, this.captionClass = e.captionClass, this.previewClass = e.previewClass, this.mainClass = e.mainClass, g(e.mainTemplate) ? this.mainTemplate = this.showCaption ? b : c : this.mainTemplate = e.mainTemplate, this.previewTemplate = this.showPreview ? e.previewTemplate : "", this.captionTemplate = e.captionTemplate, this.browseLabel = e.browseLabel, this.browseIcon = e.browseIcon, this.browseClass = e.browseClass, this.removeLabel = e.removeLabel, this.removeIcon = e.removeIcon, this.removeClass = e.removeClass, this.uploadLabel = e.uploadLabel, this.uploadIcon = e.uploadIcon, this.uploadClass = e.uploadClass, this.uploadUrl = e.uploadUrl, this.msgLoading = e.msgLoading, this.msgProgress = e.msgProgress, this.msgSelected = e.msgSelected, this.previewFileType = e.previewFileType, this.wrapTextLength = e.wrapTextLength, this.wrapIndicator = e.wrapIndicator, this.isDisabled = this.$element.attr("disabled") || this.$element.attr("readonly"), g(this.$element.attr("id")) && this.$element.attr("id", k()), this.$container = this.createContainer(), this.$captionContainer = h(e, "elCaptionContainer", this.$container.find(".file-caption")), this.$caption = h(e, "elCaptionText", this.$container.find(".file-caption-name")), this.$previewContainer = h(e, "elPreviewContainer", this.$container.find(".file-preview")), this.$preview = h(e, "elPreviewImage", this.$container.find(".file-preview-thumbnails")), this.$previewStatus = h(e, "elPreviewStatus", this.$container.find(".file-preview-status")), this.$name = this.$element.attr("name") || e.name, this.$hidden = this.$container.find('input[type=hidden][name="' + this.$name + '"]'), 0 === this.$hidden.length && (this.$hidden = a('<input type="hidden" />'), this.$container.prepend(this.$hidden)), this.original = { preview: this.$preview.html(), hiddenVal: this.$hidden.val() }, this.listen() }; l.prototype = { constructor: l, listen: function () { var b = this; b.$element.on("change", a.proxy(b.change, b)), a(b.$element[0].form).on("reset", a.proxy(b.reset, b)), b.$container.find(".fileinput-remove").on("click", a.proxy(b.clear, b)) }, trigger: function (a) { var b = this; b.$element.trigger("click"), a.preventDefault() }, clear: function (a) { var b = this; a && a.preventDefault(), b.$hidden.val(""), b.$hidden.attr("name", b.name), b.$element.attr("name", ""), b.$element.val(""), a !== !1 && (b.$element.trigger("change"), b.$element.trigger("fileclear")), b.$preview.html(""), b.$caption.html(""), b.$container.removeClass("file-input-new").addClass("file-input-new") }, reset: function (a) { var b = this; b.clear(!1), b.$hidden.val(b.original.hiddenVal), b.$preview.html(b.original.preview), b.$container.find(".fileinput-filename").text(""), b.$element.trigger("filereset") }, change: function (a) { var q, b = this, c = b.$element, d = c.get(0).files, e = d ? d.length : 1, g = c.val().replace(/\\/g, "/").replace(/.*\//, ""), h = b.$preview, l = b.$previewContainer, m = b.$previewStatus, n = b.msgLoading, o = b.msgProgress, p = b.msgSelected, r = b.previewFileType, s = parseInt(b.wrapTextLength), t = b.wrapIndicator; if (q = void 0 === a.target.files ? a.target && a.target.value ? [{ name: a.target.value.replace(/^.+\\/, "") }] : [] : a.target.files, 0 !== q.length) { h.html(""); for (var u = q.length, b = b, v = 0; v < u; v++) !function (a) { var b = a.name, c = i(a.type, a.name), d = j(a.type, a.name); if (h.length > 0 && ("any" == r ? c || d : "text" == r ? d : c) && "undefined" != typeof FileReader) { var e = new FileReader; m.html(n), l.addClass("loading"), e.onload = function (a) { var c = "", e = ""; if (d) { var g = a.target.result; if (g.length > s) { var i = k(), j = .75 * window.innerHeight, e = f.replace("{id}", i).replace("{title}", b).replace("{body}", g).replace("{height}", j); t = t.replace("{title}", b).replace("{dialog}", "$('#" + i + "').modal('show')"), g = g.substring(0, s - 1) + t } c = '<div class="file-preview-frame"><div class="file-preview-text" title="' + b + '">' + g + "</div></div>" + e } else c = '<div class="file-preview-frame"><img src="' + a.target.result + '" class="file-preview-image" title="' + b + '" alt="' + b + '"></div>'; h.append("\n" + c), v >= u - 1 && (l.removeClass("loading"), m.html("")) }, e.onprogress = function (b) { if (b.lengthComputable) { var c = parseInt(b.loaded / b.total * 100, 10), d = o.replace("{percent}", c).replace("{file}", a.name); m.html(d) } }, d ? e.readAsText(a) : e.readAsDataURL(a) } else h.append('\n<div class="file-preview-frame"><div class="file-preview-other"><h2><i class="glyphicon glyphicon-file"></i></h2>' + b + "</div></div>") }(q[v]); var w = e > 1 ? p.replace("{n}", e) : g; b.$caption.html(w), b.$container.removeClass("file-input-new"), c.trigger("fileselect", [e, g]) } }, createContainer: function () { var b = this, c = a(document.createElement("div")).attr({ class: "file-input file-input-new" }).html(b.renderMain()); return b.$element.before(c), c.find(".btn-file").append(b.$element), c }, renderMain: function () { var a = this, b = a.previewTemplate.replace("{class}", a.previewClass), c = a.isDisabled ? a.captionClass + " file-caption-disabled" : a.captionClass, d = a.captionTemplate.replace("{class}", c); return a.mainTemplate.replace("{class}", a.mainClass).replace("{preview}", b).replace("{caption}", d).replace("{upload}", a.renderUpload()).replace("{remove}", a.renderRemove()).replace("{browse}", a.renderBrowse()) }, renderBrowse: function () { var a = this, b = a.browseClass + " btn-file", c = ""; return a.isDisabled && (c = " disabled "), '<div class="' + b + '"' + c + "> " + a.browseIcon + a.browseLabel + " </div>" }, renderRemove: function () { var a = this, b = a.removeClass + " fileinput-remove fileinput-remove-button", c = ""; return a.showRemove ? (a.isDisabled && (c = " disabled "), '<button type="button" class="' + b + '"' + c + ">" + a.removeIcon + a.removeLabel + "</button>") : "" }, renderUpload: function () { var a = this, b = "", c = ""; return a.showUpload ? (a.isDisabled && (c = " disabled "), b = g(a.uploadUrl) ? "" : '<a style="visibility:hidden" href="' + a.uploadUrl + '" class="' + a.uploadClass + '"' + c + ">" + a.uploadIcon + a.uploadLabel + "</a>") : "" } }, a.fn.fileinput = function (b) { return this.each(function () { var c = a(this), d = c.data("fileinput"); d || c.data("fileinput", d = new l(this, b)), "string" == typeof b && d[b]() }) }, a.fn.fileinput = function (b) { var c = Array.apply(null, arguments); return c.shift(), this.each(function () { var d = a(this), e = d.data("fileinput"), f = "object" == typeof b && b; e || d.data("fileinput", e = new l(this, a.extend({}, a.fn.fileinput.defaults, f, a(this).data()))), "string" == typeof b && e[b].apply(e, c) }) }, a.fn.fileinput.defaults = { showCaption: !0, showPreview: !0, showRemove: !0, showUpload: !0, captionClass: "", previewClass: "", mainClass: "", mainTemplate: null, previewTemplate: d, captionTemplate: e, browseLabel: "Browse &hellip;", browseIcon: '<i class="glyphicon glyphicon-folder-open"></i> &nbsp;', browseClass: "btn btn-primary", removeLabel: "Remove", removeIcon: '<i class="glyphicon glyphicon-ban-circle"></i> ', removeClass: "btn btn-default", uploadLabel: "Upload", uploadIcon: '<i class="glyphicon glyphicon-upload"></i> ', uploadClass: "btn btn-default", uploadUrl: null, msgLoading: "Loading &hellip;", msgProgress: "Loaded {percent}% of {file}", msgSelected: "{n} files selected", previewFileType: "image", wrapTextLength: 250, wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[&hellip;]</span>', elCaptionContainer: null, elCaptionText: null, elPreviewContainer: null, elPreviewImage: null, elPreviewStatus: null }, a(function () { var b = a("input.file[type=file]"); b.length > 0 && b.fileinput() }) }(window.jQuery);